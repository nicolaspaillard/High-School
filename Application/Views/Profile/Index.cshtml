@using Models
@model ProfileViewModel
@using Application.Controllers.ViewComponents
@using Application.Controllers.Services

@inject RoleService roleService
@{
    ViewData["Title"] = "Index";
}


@*bouton déconnexion*@
@await Component.InvokeAsync("DetailsPerson", Model.Person)
@*popups :
    @await Component.InvokeAsync("EditPerson", new { Model.Person })

*@

@{Role role = await roleService.GetRoleAsync(User);}
@if (role != Models.Role.Admin)
{
    @*view daily courses : *@
    @await Component.InvokeAsync("ListCourses", Model.Courses.Where(c => c.Date.Day == DateTime.Now.Day))
    <a for="coursesList" data-toggle="collapse" href="#coursesList" aria-expanded="true" aria-controls="coursesList" class="btn btn-primary">Tous les cours</a>
    <div id="coursesList" class="collapse">
        @await Component.InvokeAsync("ListCourses", Model.Courses)
    </div>

    @*
        view all courses
        teacher:
            edit missing for his courses
            edit grades for his courses
            groups
            groups.courses
        student :
            group
    *@
}
else
{
    <a for="coursesList" data-toggle="collapse" href="#coursesList" aria-expanded="true" aria-controls="coursesList" class="btn btn-primary">Modifier les cours</a>
    <a for="peopleList" data-toggle="collapse" href="#peopleList" aria-expanded="true" aria-controls="peopleList" class="btn btn-primary">Modifier les utilisateurs</a>
    <div id="coursesList" class="collapse">
        @await Component.InvokeAsync("ListCourses", Model.Courses);
    </div>
    <div id="peopleList" class="collapse">
        @await Component.InvokeAsync("ListPeople", Model.Courses);
    </div>


    @*admin components
        view list students/teachers / edit students/teachers
        view list courses / edit courses
        view list classrooms / edit classrooms

    *@
}
