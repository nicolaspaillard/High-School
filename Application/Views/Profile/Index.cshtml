@using Models
@model ProfileViewModel
@using Application.Controllers.ViewComponents
@using Application.Controllers.Services

@inject RoleService roleService
@{
    ViewData["Title"] = "Index";
}


@*bouton déconnexion*@
@await Component.InvokeAsync("DetailsPerson", Model.Person)
@*popups :
    @await Component.InvokeAsync("EditPerson", new { Model.Person })

*@

@{Role role = await roleService.GetRoleAsync(User);}
@if (role != Models.Role.Admin)
{
    @*view daily courses : *@
    <a for="coursesList" data-toggle="collapse" href="#coursesList" aria-expanded="true" aria-controls="coursesList" class="btn btn-primary">Tous les cours</a>
    <div id="coursesList" class="collapse">
        @await Component.InvokeAsync("ListCourses", Model.Courses)
    </div>
    @if (role == Models.Role.Student)
    {
        <a for="studentsList" data-toggle="collapse" href="#studentsList" aria-expanded="true" aria-controls="studentsList" class="btn btn-primary">Tous les élèves</a>
        <div id="studentsList" class="collapse">
            @await Component.InvokeAsync("ListPeople", Model.Groups)
        </div> }
    else if (role != Models.Role.Teacher)
    {

        @*
            view all courses
            teacher:
                edit missing for his courses
                edit grades for his courses
                groups
                groups.courses

        *@
    }

}
else
{
    <div id="modal-placeholder"></div>
    <a for="coursesList" data-toggle="collapse" href="#coursesList" aria-expanded="true" aria-controls="coursesList" class="btn btn-primary">Gérer les cours</a>
    <div id="coursesList" class="collapse">
        @await Component.InvokeAsync("ListCourses", Model.Courses)
    </div>



    @*admin components
        view list students/teachers / edit students/teachers
        view list courses / edit courses
        view list classrooms / edit classrooms

    *@
}
